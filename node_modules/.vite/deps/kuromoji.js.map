{
  "version": 3,
  "sources": ["../../kuromoji/src/viterbi/ViterbiNode.js", "../../kuromoji/src/viterbi/ViterbiLattice.js", "../../kuromoji/src/util/SurrogateAwareString.js", "../../kuromoji/src/viterbi/ViterbiBuilder.js", "../../kuromoji/src/viterbi/ViterbiSearcher.js", "../../kuromoji/src/util/IpadicFormatter.js", "../../kuromoji/src/Tokenizer.js", "../../zlibjs/bin/gunzip.min.js", "browser-external:path", "../../async/dist/async.js", "../../doublearray/doublearray.js", "../../kuromoji/src/util/ByteBuffer.js", "../../kuromoji/src/dict/TokenInfoDictionary.js", "../../kuromoji/src/dict/ConnectionCosts.js", "../../kuromoji/src/dict/CharacterClass.js", "../../kuromoji/src/dict/InvokeDefinitionMap.js", "../../kuromoji/src/dict/CharacterDefinition.js", "../../kuromoji/src/dict/UnknownDictionary.js", "../../kuromoji/src/dict/DynamicDictionaries.js", "../../kuromoji/src/loader/DictionaryLoader.js", "../../kuromoji/src/loader/BrowserDictionaryLoader.js", "../../kuromoji/src/TokenizerBuilder.js", "../../kuromoji/src/dict/builder/ConnectionCostsBuilder.js", "../../kuromoji/src/dict/builder/CharacterDefinitionBuilder.js", "../../kuromoji/src/dict/builder/DictionaryBuilder.js", "../../kuromoji/src/kuromoji.js", "dep:kuromoji"],
  "sourcesContent": ["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiNode is a node of ViterbiLattice\n * @param {number} node_name Word ID\n * @param {number} node_cost Word cost to generate\n * @param {number} start_pos Start position from 1\n * @param {number} length Word length\n * @param {string} type Node type (KNOWN, UNKNOWN, BOS, EOS, ...)\n * @param {number} left_id Left context ID\n * @param {number} right_id Right context ID\n * @param {string} surface_form Surface form of this word\n * @constructor\n */\nfunction ViterbiNode(node_name, node_cost, start_pos, length, type, left_id, right_id, surface_form) {\n    this.name = node_name;\n    this.cost = node_cost;\n    this.start_pos = start_pos;\n    this.length = length;\n    this.left_id = left_id;\n    this.right_id = right_id;\n    this.prev = null;\n    this.surface_form = surface_form;\n    if (type === \"BOS\") {\n        this.shortest_cost = 0;\n    } else {\n        this.shortest_cost = Number.MAX_VALUE;\n    }\n    this.type = type;\n}\n\nmodule.exports = ViterbiNode;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\n\n/**\n * ViterbiLattice is a lattice in Viterbi algorithm\n * @constructor\n */\nfunction ViterbiLattice() {\n    this.nodes_end_at = [];\n    this.nodes_end_at[0] = [ new ViterbiNode(-1, 0, 0, 0, \"BOS\", 0, 0, \"\") ];\n    this.eos_pos = 1;\n}\n\n/**\n * Append node to ViterbiLattice\n * @param {ViterbiNode} node\n */\nViterbiLattice.prototype.append = function (node) {\n    var last_pos = node.start_pos + node.length - 1;\n    if (this.eos_pos < last_pos) {\n        this.eos_pos = last_pos;\n    }\n\n    var prev_nodes = this.nodes_end_at[last_pos];\n    if (prev_nodes == null) {\n        prev_nodes = [];\n    }\n    prev_nodes.push(node);\n\n    this.nodes_end_at[last_pos] = prev_nodes;\n};\n\n/**\n * Set ends with EOS (End of Statement)\n */\nViterbiLattice.prototype.appendEos = function () {\n    var last_index = this.nodes_end_at.length;\n    this.eos_pos++;\n    this.nodes_end_at[last_index] = [ new ViterbiNode(-1, 0, this.eos_pos, 0, \"EOS\", 0, 0, \"\") ];\n};\n\nmodule.exports = ViterbiLattice;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * String wrapper for UTF-16 surrogate pair (4 bytes)\n * @param {string} str String to wrap\n * @constructor\n */\nfunction SurrogateAwareString(str) {\n    this.str = str;\n    this.index_mapping = [];\n\n    for (var pos = 0; pos < str.length; pos++) {\n        var ch = str.charAt(pos);\n        this.index_mapping.push(pos);\n        if (SurrogateAwareString.isSurrogatePair(ch)) {\n            pos++;\n        }\n    }\n    // Surrogate aware length\n    this.length = this.index_mapping.length;\n}\n\nSurrogateAwareString.prototype.slice = function (index) {\n    if (this.index_mapping.length <= index) {\n        return \"\";\n    }\n    var surrogate_aware_index = this.index_mapping[index];\n    return this.str.slice(surrogate_aware_index);\n};\n\nSurrogateAwareString.prototype.charAt = function (index) {\n    if (this.str.length <= index) {\n        return \"\";\n    }\n    var surrogate_aware_start_index = this.index_mapping[index];\n    var surrogate_aware_end_index = this.index_mapping[index + 1];\n\n    if (surrogate_aware_end_index == null) {\n        return this.str.slice(surrogate_aware_start_index);\n    }\n    return this.str.slice(surrogate_aware_start_index, surrogate_aware_end_index);\n};\n\nSurrogateAwareString.prototype.charCodeAt = function (index) {\n    if (this.index_mapping.length <= index) {\n        return NaN;\n    }\n    var surrogate_aware_index = this.index_mapping[index];\n    var upper = this.str.charCodeAt(surrogate_aware_index);\n    var lower;\n    if (upper >= 0xD800 && upper <= 0xDBFF && surrogate_aware_index < this.str.length) {\n        lower = this.str.charCodeAt(surrogate_aware_index + 1);\n        if (lower >= 0xDC00 && lower <= 0xDFFF) {\n            return (upper - 0xD800) * 0x400 + lower - 0xDC00 + 0x10000;\n        }\n    }\n    return upper;\n};\n\nSurrogateAwareString.prototype.toString = function () {\n    return this.str;\n};\n\nSurrogateAwareString.isSurrogatePair = function (ch) {\n    var utf16_code = ch.charCodeAt(0);\n    if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n        // surrogate pair\n        return true;\n    } else {\n        return false;\n    }\n};\n\nmodule.exports = SurrogateAwareString;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiNode = require(\"./ViterbiNode\");\nvar ViterbiLattice = require(\"./ViterbiLattice\");\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n\n/**\n * ViterbiBuilder builds word lattice (ViterbiLattice)\n * @param {DynamicDictionaries} dic dictionary\n * @constructor\n */\nfunction ViterbiBuilder(dic) {\n    this.trie = dic.trie;\n    this.token_info_dictionary = dic.token_info_dictionary;\n    this.unknown_dictionary = dic.unknown_dictionary;\n}\n\n/**\n * Build word lattice\n * @param {string} sentence_str Input text\n * @returns {ViterbiLattice} Word lattice\n */\nViterbiBuilder.prototype.build = function (sentence_str) {\n    var lattice = new ViterbiLattice();\n    var sentence = new SurrogateAwareString(sentence_str);\n\n    var key, trie_id, left_id, right_id, word_cost;\n    for (var pos = 0; pos < sentence.length; pos++) {\n        var tail = sentence.slice(pos);\n        var vocabulary = this.trie.commonPrefixSearch(tail);\n        for (var n = 0; n < vocabulary.length; n++) {  // Words in dictionary do not have surrogate pair (only UCS2 set)\n            trie_id = vocabulary[n].v;\n            key = vocabulary[n].k;\n\n            var token_info_ids = this.token_info_dictionary.target_map[trie_id];\n            for (var i = 0; i < token_info_ids.length; i++) {\n                var token_info_id = parseInt(token_info_ids[i]);\n\n                left_id = this.token_info_dictionary.dictionary.getShort(token_info_id);\n                right_id = this.token_info_dictionary.dictionary.getShort(token_info_id + 2);\n                word_cost = this.token_info_dictionary.dictionary.getShort(token_info_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(token_info_id, word_cost, pos + 1, key.length, \"KNOWN\", left_id, right_id, key));\n            }\n        }\n\n        // Unknown word processing\n        var surrogate_aware_tail = new SurrogateAwareString(tail);\n        var head_char = new SurrogateAwareString(surrogate_aware_tail.charAt(0));\n        var head_char_class = this.unknown_dictionary.lookup(head_char.toString());\n        if (vocabulary == null || vocabulary.length === 0 || head_char_class.is_always_invoke === 1) {\n            // Process unknown word\n            key = head_char;\n            if (head_char_class.is_grouping === 1 && 1 < surrogate_aware_tail.length) {\n                for (var k = 1; k < surrogate_aware_tail.length; k++) {\n                    var next_char = surrogate_aware_tail.charAt(k);\n                    var next_char_class = this.unknown_dictionary.lookup(next_char);\n                    if (head_char_class.class_name !== next_char_class.class_name) {\n                        break;\n                    }\n                    key += next_char;\n                }\n            }\n\n            var unk_ids = this.unknown_dictionary.target_map[head_char_class.class_id];\n            for (var j = 0; j < unk_ids.length; j++) {\n                var unk_id = parseInt(unk_ids[j]);\n\n                left_id = this.unknown_dictionary.dictionary.getShort(unk_id);\n                right_id = this.unknown_dictionary.dictionary.getShort(unk_id + 2);\n                word_cost = this.unknown_dictionary.dictionary.getShort(unk_id + 4);\n\n                // node_name, cost, start_index, length, type, left_id, right_id, surface_form\n                lattice.append(new ViterbiNode(unk_id, word_cost, pos + 1, key.length, \"UNKNOWN\", left_id, right_id, key.toString()));\n            }\n        }\n    }\n    lattice.appendEos();\n\n    return lattice;\n};\n\nmodule.exports = ViterbiBuilder;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\nfunction ViterbiSearcher(connection_costs) {\n    this.connection_costs = connection_costs;\n}\n\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\nViterbiSearcher.prototype.search = function (lattice) {\n    lattice = this.forward(lattice);\n    return this.backward(lattice);\n};\n\nViterbiSearcher.prototype.forward = function (lattice) {\n    var i, j, k;\n    for (i = 1; i <= lattice.eos_pos; i++) {\n        var nodes = lattice.nodes_end_at[i];\n        if (nodes == null) {\n            continue;\n        }\n        for (j = 0; j < nodes.length; j++) {\n            var node = nodes[j];\n            var cost = Number.MAX_VALUE;\n            var shortest_prev_node;\n\n            var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n            if (prev_nodes == null) {\n                // TODO process unknown words (repair word lattice)\n                continue;\n            }\n            for (k = 0; k < prev_nodes.length; k++) {\n                var prev_node = prev_nodes[k];\n\n                var edge_cost;\n                if (node.left_id == null || prev_node.right_id == null) {\n                    // TODO assert\n                    console.log(\"Left or right is null\");\n                    edge_cost = 0;\n                } else {\n                    edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n                }\n\n                var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n                if (_cost < cost) {\n                    shortest_prev_node = prev_node;\n                    cost = _cost;\n                }\n            }\n\n            node.prev = shortest_prev_node;\n            node.shortest_cost = cost;\n        }\n    }\n    return lattice;\n};\n\nViterbiSearcher.prototype.backward = function (lattice) {\n    var shortest_path = [];\n    var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n\n    var node_back = eos.prev;\n    if (node_back == null) {\n        return [];\n    }\n    while (node_back.type !== \"BOS\") {\n        shortest_path.push(node_back);\n        if (node_back.prev == null) {\n            // TODO Failed to back. Process unknown words?\n            return [];\n        }\n        node_back = node_back.prev;\n    }\n\n    return shortest_path.reverse();\n};\n\nmodule.exports = ViterbiSearcher;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Mappings between IPADIC dictionary features and tokenized results\n * @constructor\n */\nfunction IpadicFormatter() {\n}\n\nIpadicFormatter.prototype.formatEntry = function (word_id, position, type, features) {\n    var token = {};\n    token.word_id = word_id;\n    token.word_type = type;\n    token.word_position = position;\n\n    token.surface_form = features[0];\n    token.pos = features[1];\n    token.pos_detail_1 = features[2];\n    token.pos_detail_2 = features[3];\n    token.pos_detail_3 = features[4];\n    token.conjugated_type = features[5];\n    token.conjugated_form = features[6];\n    token.basic_form = features[7];\n    token.reading = features[8];\n    token.pronunciation = features[9];\n\n    return token;\n};\n\nIpadicFormatter.prototype.formatUnknownEntry = function (word_id, position, type, features, surface_form) {\n    var token = {};\n    token.word_id = word_id;\n    token.word_type = type;\n    token.word_position = position;\n\n    token.surface_form = surface_form;\n    token.pos = features[1];\n    token.pos_detail_1 = features[2];\n    token.pos_detail_2 = features[3];\n    token.pos_detail_3 = features[4];\n    token.conjugated_type = features[5];\n    token.conjugated_form = features[6];\n    token.basic_form = features[7];\n    // token.reading = features[8];\n    // token.pronunciation = features[9];\n\n    return token;\n};\n\nmodule.exports = IpadicFormatter;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ViterbiBuilder = require(\"./viterbi/ViterbiBuilder\");\nvar ViterbiSearcher = require(\"./viterbi/ViterbiSearcher\");\nvar IpadicFormatter = require(\"./util/IpadicFormatter\");\n\nvar PUNCTUATION = /\u3001|\u3002/;\n\n/**\n * Tokenizer\n * @param {DynamicDictionaries} dic Dictionaries used by this tokenizer\n * @constructor\n */\nfunction Tokenizer(dic) {\n    this.token_info_dictionary = dic.token_info_dictionary;\n    this.unknown_dictionary = dic.unknown_dictionary;\n    this.viterbi_builder = new ViterbiBuilder(dic);\n    this.viterbi_searcher = new ViterbiSearcher(dic.connection_costs);\n    this.formatter = new IpadicFormatter();  // TODO Other dictionaries\n}\n\n/**\n * Split into sentence by punctuation\n * @param {string} input Input text\n * @returns {Array.<string>} Sentences end with punctuation\n */\nTokenizer.splitByPunctuation = function (input) {\n    var sentences = [];\n    var tail = input;\n    while (true) {\n        if (tail === \"\") {\n            break;\n        }\n        var index = tail.search(PUNCTUATION);\n        if (index < 0) {\n            sentences.push(tail);\n            break;\n        }\n        sentences.push(tail.substring(0, index + 1));\n        tail = tail.substring(index + 1);\n    }\n    return sentences;\n};\n\n/**\n * Tokenize text\n * @param {string} text Input text to analyze\n * @returns {Array} Tokens\n */\nTokenizer.prototype.tokenize = function (text) {\n    var sentences = Tokenizer.splitByPunctuation(text);\n    var tokens = [];\n    for (var i = 0; i < sentences.length; i++) {\n        var sentence = sentences[i];\n        this.tokenizeForSentence(sentence, tokens);\n    }\n    return tokens;\n};\n\nTokenizer.prototype.tokenizeForSentence = function (sentence, tokens) {\n    if (tokens == null) {\n        tokens = [];\n    }\n    var lattice = this.getLattice(sentence);\n    var best_path = this.viterbi_searcher.search(lattice);\n    var last_pos = 0;\n    if (tokens.length > 0) {\n        last_pos = tokens[tokens.length - 1].word_position;\n    }\n\n    for (var j = 0; j < best_path.length; j++) {\n        var node = best_path[j];\n\n        var token, features, features_line;\n        if (node.type === \"KNOWN\") {\n            features_line = this.token_info_dictionary.getFeatures(node.name);\n            if (features_line == null) {\n                features = [];\n            } else {\n                features = features_line.split(\",\");\n            }\n            token = this.formatter.formatEntry(node.name, last_pos + node.start_pos, node.type, features);\n        } else if (node.type === \"UNKNOWN\") {\n            // Unknown word\n            features_line = this.unknown_dictionary.getFeatures(node.name);\n            if (features_line == null) {\n                features = [];\n            } else {\n                features = features_line.split(\",\");\n            }\n            token = this.formatter.formatUnknownEntry(node.name, last_pos + node.start_pos, node.type, features, node.surface_form);\n        } else {\n            // TODO User dictionary\n            token = this.formatter.formatEntry(node.name, last_pos + node.start_pos, node.type, []);\n        }\n\n        tokens.push(token);\n    }\n\n    return tokens;\n};\n\n/**\n * Build word lattice\n * @param {string} text Input text to analyze\n * @returns {ViterbiLattice} Word lattice\n */\nTokenizer.prototype.getLattice = function (text) {\n    return this.viterbi_builder.build(text);\n};\n\nmodule.exports = Tokenizer;\n", "/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function n(e){throw e;}var p=void 0,aa=this;function t(e,b){var d=e.split(\".\"),c=aa;!(d[0]in c)&&c.execScript&&c.execScript(\"var \"+d[0]);for(var a;d.length&&(a=d.shift());)!d.length&&b!==p?c[a]=b:c=c[a]?c[a]:c[a]={}};var x=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;new (x?Uint8Array:Array)(256);var y;for(y=0;256>y;++y)for(var A=y,ba=7,A=A>>>1;A;A>>>=1)--ba;function B(e,b,d){var c,a=\"number\"===typeof b?b:b=0,f=\"number\"===typeof d?d:e.length;c=-1;for(a=f&7;a--;++b)c=c>>>8^C[(c^e[b])&255];for(a=f>>3;a--;b+=8)c=c>>>8^C[(c^e[b])&255],c=c>>>8^C[(c^e[b+1])&255],c=c>>>8^C[(c^e[b+2])&255],c=c>>>8^C[(c^e[b+3])&255],c=c>>>8^C[(c^e[b+4])&255],c=c>>>8^C[(c^e[b+5])&255],c=c>>>8^C[(c^e[b+6])&255],c=c>>>8^C[(c^e[b+7])&255];return(c^4294967295)>>>0}\nvar D=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,\n2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,\n2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,\n2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,\n3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,\n936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],C=x?new Uint32Array(D):D;function E(){}E.prototype.getName=function(){return this.name};E.prototype.getData=function(){return this.data};E.prototype.G=function(){return this.H};function G(e){var b=e.length,d=0,c=Number.POSITIVE_INFINITY,a,f,k,l,m,r,q,g,h,v;for(g=0;g<b;++g)e[g]>d&&(d=e[g]),e[g]<c&&(c=e[g]);a=1<<d;f=new (x?Uint32Array:Array)(a);k=1;l=0;for(m=2;k<=d;){for(g=0;g<b;++g)if(e[g]===k){r=0;q=l;for(h=0;h<k;++h)r=r<<1|q&1,q>>=1;v=k<<16|g;for(h=r;h<a;h+=m)f[h]=v;++l}++k;l<<=1;m<<=1}return[f,d,c]};var J=[],K;for(K=0;288>K;K++)switch(!0){case 143>=K:J.push([K+48,8]);break;case 255>=K:J.push([K-144+400,9]);break;case 279>=K:J.push([K-256+0,7]);break;case 287>=K:J.push([K-280+192,8]);break;default:n(\"invalid literal: \"+K)}\nvar ca=function(){function e(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,\na-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:n(\"invalid length: \"+a)}}var b=[],d,c;for(d=3;258>=d;d++)c=e(d),b[d]=c[2]<<24|c[1]<<\n16|c[0];return b}();x&&new Uint32Array(ca);function L(e,b){this.i=[];this.j=32768;this.d=this.f=this.c=this.n=0;this.input=x?new Uint8Array(e):e;this.o=!1;this.k=M;this.w=!1;if(b||!(b={}))b.index&&(this.c=b.index),b.bufferSize&&(this.j=b.bufferSize),b.bufferType&&(this.k=b.bufferType),b.resize&&(this.w=b.resize);switch(this.k){case N:this.a=32768;this.b=new (x?Uint8Array:Array)(32768+this.j+258);break;case M:this.a=0;this.b=new (x?Uint8Array:Array)(this.j);this.e=this.D;this.q=this.A;this.l=this.C;break;default:n(Error(\"invalid inflate mode\"))}}\nvar N=0,M=1;\nL.prototype.g=function(){for(;!this.o;){var e=P(this,3);e&1&&(this.o=!0);e>>>=1;switch(e){case 0:var b=this.input,d=this.c,c=this.b,a=this.a,f=b.length,k=p,l=p,m=c.length,r=p;this.d=this.f=0;d+1>=f&&n(Error(\"invalid uncompressed block header: LEN\"));k=b[d++]|b[d++]<<8;d+1>=f&&n(Error(\"invalid uncompressed block header: NLEN\"));l=b[d++]|b[d++]<<8;k===~l&&n(Error(\"invalid uncompressed block header: length verify\"));d+k>b.length&&n(Error(\"input buffer is broken\"));switch(this.k){case N:for(;a+k>c.length;){r=\nm-a;k-=r;if(x)c.set(b.subarray(d,d+r),a),a+=r,d+=r;else for(;r--;)c[a++]=b[d++];this.a=a;c=this.e();a=this.a}break;case M:for(;a+k>c.length;)c=this.e({t:2});break;default:n(Error(\"invalid inflate mode\"))}if(x)c.set(b.subarray(d,d+k),a),a+=k,d+=k;else for(;k--;)c[a++]=b[d++];this.c=d;this.a=a;this.b=c;break;case 1:this.l(da,ea);break;case 2:for(var q=P(this,5)+257,g=P(this,5)+1,h=P(this,4)+4,v=new (x?Uint8Array:Array)(Q.length),s=p,F=p,H=p,w=p,z=p,O=p,I=p,u=p,Z=p,u=0;u<h;++u)v[Q[u]]=P(this,3);if(!x){u=\nh;for(h=v.length;u<h;++u)v[Q[u]]=0}s=G(v);w=new (x?Uint8Array:Array)(q+g);u=0;for(Z=q+g;u<Z;)switch(z=R(this,s),z){case 16:for(I=3+P(this,2);I--;)w[u++]=O;break;case 17:for(I=3+P(this,3);I--;)w[u++]=0;O=0;break;case 18:for(I=11+P(this,7);I--;)w[u++]=0;O=0;break;default:O=w[u++]=z}F=x?G(w.subarray(0,q)):G(w.slice(0,q));H=x?G(w.subarray(q)):G(w.slice(q));this.l(F,H);break;default:n(Error(\"unknown BTYPE: \"+e))}}return this.q()};\nvar S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Q=x?new Uint16Array(S):S,fa=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],ga=x?new Uint16Array(fa):fa,ha=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],T=x?new Uint8Array(ha):ha,ia=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ja=x?new Uint16Array(ia):ia,ka=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,\n11,12,12,13,13],U=x?new Uint8Array(ka):ka,V=new (x?Uint8Array:Array)(288),W,la;W=0;for(la=V.length;W<la;++W)V[W]=143>=W?8:255>=W?9:279>=W?7:8;var da=G(V),X=new (x?Uint8Array:Array)(30),Y,ma;Y=0;for(ma=X.length;Y<ma;++Y)X[Y]=5;var ea=G(X);function P(e,b){for(var d=e.f,c=e.d,a=e.input,f=e.c,k=a.length,l;c<b;)f>=k&&n(Error(\"input buffer is broken\")),d|=a[f++]<<c,c+=8;l=d&(1<<b)-1;e.f=d>>>b;e.d=c-b;e.c=f;return l}\nfunction R(e,b){for(var d=e.f,c=e.d,a=e.input,f=e.c,k=a.length,l=b[0],m=b[1],r,q;c<m&&!(f>=k);)d|=a[f++]<<c,c+=8;r=l[d&(1<<m)-1];q=r>>>16;q>c&&n(Error(\"invalid code length: \"+q));e.f=d>>q;e.d=c-q;e.c=f;return r&65535}\nL.prototype.l=function(e,b){var d=this.b,c=this.a;this.r=e;for(var a=d.length-258,f,k,l,m;256!==(f=R(this,e));)if(256>f)c>=a&&(this.a=c,d=this.e(),c=this.a),d[c++]=f;else{k=f-257;m=ga[k];0<T[k]&&(m+=P(this,T[k]));f=R(this,b);l=ja[f];0<U[f]&&(l+=P(this,U[f]));c>=a&&(this.a=c,d=this.e(),c=this.a);for(;m--;)d[c]=d[c++-l]}for(;8<=this.d;)this.d-=8,this.c--;this.a=c};\nL.prototype.C=function(e,b){var d=this.b,c=this.a;this.r=e;for(var a=d.length,f,k,l,m;256!==(f=R(this,e));)if(256>f)c>=a&&(d=this.e(),a=d.length),d[c++]=f;else{k=f-257;m=ga[k];0<T[k]&&(m+=P(this,T[k]));f=R(this,b);l=ja[f];0<U[f]&&(l+=P(this,U[f]));c+m>a&&(d=this.e(),a=d.length);for(;m--;)d[c]=d[c++-l]}for(;8<=this.d;)this.d-=8,this.c--;this.a=c};\nL.prototype.e=function(){var e=new (x?Uint8Array:Array)(this.a-32768),b=this.a-32768,d,c,a=this.b;if(x)e.set(a.subarray(32768,e.length));else{d=0;for(c=e.length;d<c;++d)e[d]=a[d+32768]}this.i.push(e);this.n+=e.length;if(x)a.set(a.subarray(b,b+32768));else for(d=0;32768>d;++d)a[d]=a[b+d];this.a=32768;return a};\nL.prototype.D=function(e){var b,d=this.input.length/this.c+1|0,c,a,f,k=this.input,l=this.b;e&&(\"number\"===typeof e.t&&(d=e.t),\"number\"===typeof e.z&&(d+=e.z));2>d?(c=(k.length-this.c)/this.r[2],f=258*(c/2)|0,a=f<l.length?l.length+f:l.length<<1):a=l.length*d;x?(b=new Uint8Array(a),b.set(l)):b=l;return this.b=b};\nL.prototype.q=function(){var e=0,b=this.b,d=this.i,c,a=new (x?Uint8Array:Array)(this.n+(this.a-32768)),f,k,l,m;if(0===d.length)return x?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);f=0;for(k=d.length;f<k;++f){c=d[f];l=0;for(m=c.length;l<m;++l)a[e++]=c[l]}f=32768;for(k=this.a;f<k;++f)a[e++]=b[f];this.i=[];return this.buffer=a};\nL.prototype.A=function(){var e,b=this.a;x?this.w?(e=new Uint8Array(b),e.set(this.b.subarray(0,b))):e=this.b.subarray(0,b):(this.b.length>b&&(this.b.length=b),e=this.b);return this.buffer=e};function $(e){this.input=e;this.c=0;this.m=[];this.s=!1}$.prototype.F=function(){this.s||this.g();return this.m.slice()};\n$.prototype.g=function(){for(var e=this.input.length;this.c<e;){var b=new E,d=p,c=p,a=p,f=p,k=p,l=p,m=p,r=p,q=p,g=this.input,h=this.c;b.u=g[h++];b.v=g[h++];(31!==b.u||139!==b.v)&&n(Error(\"invalid file signature:\"+b.u+\",\"+b.v));b.p=g[h++];switch(b.p){case 8:break;default:n(Error(\"unknown compression method: \"+b.p))}b.h=g[h++];r=g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24;b.H=new Date(1E3*r);b.N=g[h++];b.M=g[h++];0<(b.h&4)&&(b.I=g[h++]|g[h++]<<8,h+=b.I);if(0<(b.h&8)){m=[];for(l=0;0<(k=g[h++]);)m[l++]=String.fromCharCode(k);\nb.name=m.join(\"\")}if(0<(b.h&16)){m=[];for(l=0;0<(k=g[h++]);)m[l++]=String.fromCharCode(k);b.J=m.join(\"\")}0<(b.h&2)&&(b.B=B(g,0,h)&65535,b.B!==(g[h++]|g[h++]<<8)&&n(Error(\"invalid header crc16\")));d=g[g.length-4]|g[g.length-3]<<8|g[g.length-2]<<16|g[g.length-1]<<24;g.length-h-4-4<512*d&&(f=d);c=new L(g,{index:h,bufferSize:f});b.data=a=c.g();h=c.c;b.K=q=(g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24)>>>0;B(a,p,p)!==q&&n(Error(\"invalid CRC-32 checksum: 0x\"+B(a,p,p).toString(16)+\" / 0x\"+q.toString(16)));b.L=\nd=(g[h++]|g[h++]<<8|g[h++]<<16|g[h++]<<24)>>>0;(a.length&4294967295)!==d&&n(Error(\"invalid input size: \"+(a.length&4294967295)+\" / \"+d));this.m.push(b);this.c=h}this.s=!0;var v=this.m,s,F,H=0,w=0,z;s=0;for(F=v.length;s<F;++s)w+=v[s].data.length;if(x){z=new Uint8Array(w);for(s=0;s<F;++s)z.set(v[s].data,H),H+=v[s].data.length}else{z=[];for(s=0;s<F;++s)z[s]=v[s].data;z=Array.prototype.concat.apply([],z)}return z};t(\"Zlib.Gunzip\",$);t(\"Zlib.Gunzip.prototype.decompress\",$.prototype.g);t(\"Zlib.Gunzip.prototype.getMembers\",$.prototype.F);t(\"Zlib.GunzipMember\",E);t(\"Zlib.GunzipMember.prototype.getName\",E.prototype.getName);t(\"Zlib.GunzipMember.prototype.getData\",E.prototype.getData);t(\"Zlib.GunzipMember.prototype.getMtime\",E.prototype.G);}).call(this);\n", "export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"path\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction slice(arrayLike, start) {\n    start = start|0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n    for(var idx = 0; idx < newLen; idx++)  {\n        newArr[idx] = arrayLike[start + idx];\n    }\n    return newArr;\n}\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply = function(fn/*, ...args*/) {\n    var args = slice(arguments, 1);\n    return function(/*callArgs*/) {\n        var callArgs = slice(arguments);\n        return fn.apply(null, args.concat(callArgs));\n    };\n};\n\nvar initialParams = function (fn) {\n    return function (/*...args, callback*/) {\n        var args = slice(arguments);\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    };\n};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        defer(function () {\n            fn.apply(null, args);\n        });\n    };\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function(value) {\n                invokeCallback(callback, null, value);\n            }, function(err) {\n                invokeCallback(callback, err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (e) {\n        setImmediate$1(rethrow, e);\n    }\n}\n\nfunction rethrow(error) {\n    throw error;\n}\n\nvar supportsSymbol = typeof Symbol === 'function';\n\nfunction isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nfunction applyEach$1(eachfn) {\n    return function(fns/*, ...args*/) {\n        var args = slice(arguments, 1);\n        var go = initialParams(function(args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                wrapAsync(fn).apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key: key} : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function() {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        _iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(function(err, result) {\n            runningTasks--;\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function(val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg){\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            wrapAsync(taskFn).apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function(node) {\n    if (node.prev) node.prev.next = node.next;\n    else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;\n    else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = function () {\n    while(this.head) this.shift();\n    return this;\n};\n\nDLL.prototype.insertAfter = function(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;\n    else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;\n    else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function(node) {\n    if (this.head) this.insertBefore(this.head, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.push = function(node) {\n    if (this.tail) this.insertAfter(this.tail, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.shift = function() {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function() {\n    return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for(var idx = 0; idx < this.length; idx++) {\n        arr[idx] = curr.data;\n        curr = curr.next;\n    }\n    return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while(!!curr) {\n        var next = curr.next;\n        if (testFn(curr)) {\n            this.removeLink(curr);\n        }\n        curr = next;\n    }\n    return this;\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(function() {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    }\n\n    function _next(tasks) {\n        return function(err){\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = baseIndexOf(workersList, task, 0);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback.apply(task, arguments);\n\n                if (err != null) {\n                    q.error(err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        };\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated:noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        remove: function (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n\n                if (numRunning === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return numRunning;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOfSeries(coll, function(x, i, callback) {\n        _iteratee(memo, x, function(err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function(err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(/*...functions*/) {\n    var _functions = arrayMap(arguments, wrapAsync);\n    return function(/*...args*/) {\n        var args = slice(arguments);\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(_functions, args, function(newargs, fn, cb) {\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\n                var nextargs = slice(arguments, 1);\n                cb(err, nextargs);\n            }));\n        },\n        function(err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = function(/*...args*/) {\n    return seq.apply(null, slice(arguments).reverse());\n};\n\nvar _concat = Array.prototype.concat;\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err /*, ...args*/) {\n            if (err) return callback(err);\n            return callback(null, slice(arguments, 1));\n        });\n    }, function(err, mapResults) {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = _concat.apply(result, mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doLimit(concatLimit, Infinity);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doLimit(concatLimit, 1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = function(/*...values*/) {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function (/*...ignoredArgs, callback*/) {\n        var callback = arguments[arguments.length - 1];\n        return callback.apply(this, args);\n    };\n};\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nfunction _createTester(check, getResult) {\n    return function(eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function(value, _, callback) {\n            iteratee(value, function(err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function(err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        args.push(function (err/*, ...args*/) {\n            var args = slice(arguments, 1);\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        });\n        wrapAsync(fn).apply(null, args);\n    };\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occurred, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        args.push(check);\n        _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    check(null, true);\n\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        if (test.apply(this, args)) return _iteratee(next);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function() {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occurred, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err) {\n        if (err) return callback(err);\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    _test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupByLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err, key) {\n            if (err) return callback(err);\n            return callback(null, {key: key, val: val});\n        });\n    }, function(err, mapResults) {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var key = mapResults[i].key;\n                var val = mapResults[i].val;\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nvar groupBy = doLimit(groupByLimit, Infinity);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupBySeries = doLimit(groupByLimit, 1);\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    eachOfLimit(obj, limit, function(val, key, next) {\n        _iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function() {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn.apply(null, args.concat(function(/*args*/) {\n                var args = slice(arguments);\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            }));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        wrapAsync(task)(function (err, result) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            results[key] = result;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue(function (items, cb) {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(function callback(error, cbArg) {\n            if (error) {\n                reflectCallback(null, { error: error });\n            } else {\n                var value;\n                if (arguments.length <= 2) {\n                    value = cbArg;\n                } else {\n                    value = slice(arguments, 1);\n                }\n                reflectCallback(null, { value: value });\n            }\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function(task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function(value, cb) {\n        iteratee(value, function(err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task(function(err) {\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    var _task = wrapAsync(task);\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            _task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    map(coll, function (x, callback) {\n        _iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, {value: x, criteria: criteria});\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams(function (args, callback) {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push(function () {\n            if (!timedOut) {\n                callback.apply(null, arguments);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn.apply(null, args);\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function(v, k, cb) {\n        _iteratee(accumulator, v, k, cb);\n    }, function(err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function(task, callback) {\n        wrapAsync(task)(function (err, res/*, ...args*/) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            } else {\n                result = res;\n            }\n            error = err;\n            callback(!err);\n        });\n    }, function () {\n        callback(error, result);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    if (!test()) return callback(null);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        if (test()) return _iteratee(next);\n        var args = slice(arguments, 1);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, iteratee, callback) {\n    whilst(function() {\n        return !test.apply(this, arguments);\n    }, iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        args.push(onlyOnce(next));\n        task.apply(null, args);\n    }\n\n    function next(err/*, ...args*/) {\n        if (err || taskIndex === tasks.length) {\n            return callback.apply(null, arguments);\n        }\n        nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n};\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction\n */\n\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\n\nvar index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.apply = apply;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatLimit = concatLimit;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.groupBy = groupBy;\nexports.groupByLimit = groupByLimit;\nexports.groupBySeries = groupBySeries;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.tryEach = tryEach;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "// Copyright (c) 2014 Takuya Asano All Rights Reserved.\n\n(function () {\n\n    \"use strict\";\n\n    var TERM_CHAR = \"\\u0000\", // terminal character\n        TERM_CODE = 0,        // terminal character code\n        ROOT_ID = 0,          // index of root node\n        NOT_FOUND = -1,       // traverse() returns if no nodes found\n        BASE_SIGNED = true,\n        CHECK_SIGNED = true,\n        BASE_BYTES = 4,\n        CHECK_BYTES = 4,\n        MEMORY_EXPAND_RATIO = 2;\n\n\n    var newBC = function (initial_size) {\n\n        if (initial_size == null) {\n            initial_size = 1024;\n        }\n\n        var initBase = function (_base, start, end) {  // 'end' index does not include\n            for (var i = start; i < end; i++) {\n                _base[i] = - i + 1;  // inversed previous empty node index\n            }\n            if (0 < check.array[check.array.length - 1]) {\n                var last_used_id = check.array.length - 2;\n                while (0 < check.array[last_used_id]) {\n                    last_used_id--;\n                }\n                _base[start] = - last_used_id;\n            }\n        };\n\n        var initCheck = function (_check, start, end) {\n            for (var i = start; i < end; i++) {\n                _check[i] = - i - 1;  // inversed next empty node index\n            }\n        };\n\n        var realloc = function (min_size) {\n            // expand arrays size by given ratio\n            var new_size = min_size * MEMORY_EXPAND_RATIO;\n            // console.log('re-allocate memory to ' + new_size);\n\n            var base_new_array = newArrayBuffer(base.signed, base.bytes, new_size);\n            initBase(base_new_array, base.array.length, new_size);  // init BASE in new range\n            base_new_array.set(base.array);\n            base.array = null;  // explicit GC\n            base.array = base_new_array;\n\n            var check_new_array = newArrayBuffer(check.signed, check.bytes, new_size);\n            initCheck(check_new_array, check.array.length, new_size);  // init CHECK in new range\n            check_new_array.set(check.array);\n            check.array = null;  // explicit GC\n            check.array = check_new_array;\n        };\n\n        var first_unused_node = ROOT_ID + 1;\n\n        var base = {\n            signed: BASE_SIGNED,\n            bytes: BASE_BYTES,\n            array: newArrayBuffer(BASE_SIGNED, BASE_BYTES, initial_size)\n        };\n\n        var check = {\n            signed: CHECK_SIGNED,\n            bytes: CHECK_BYTES,\n            array: newArrayBuffer(CHECK_SIGNED, CHECK_BYTES, initial_size)\n        };\n\n        // init root node\n        base.array[ROOT_ID] = 1;\n        check.array[ROOT_ID] = ROOT_ID;\n\n        // init BASE\n        initBase(base.array, ROOT_ID + 1, base.array.length);\n\n        // init CHECK\n        initCheck(check.array, ROOT_ID + 1, check.array.length);\n\n        return {\n            getBaseBuffer: function () {\n                return base.array;\n            },\n            getCheckBuffer: function () {\n                return check.array;\n            },\n            loadBaseBuffer: function (base_buffer) {\n                base.array = base_buffer;\n                return this;\n            },\n            loadCheckBuffer: function (check_buffer) {\n                check.array = check_buffer;\n                return this;\n            },\n            size: function () {\n                return Math.max(base.array.length, check.array.length);\n            },\n            getBase: function (index) {\n                if (base.array.length - 1 < index) {\n                    return - index + 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(base.array[index])) {\n                //     console.log('getBase:' + index);\n                //     throw 'getBase' + index;\n                // }\n                return base.array[index];\n            },\n            getCheck: function (index) {\n                if (check.array.length - 1 < index) {\n                    return - index - 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(check.array[index])) {\n                //     console.log('getCheck:' + index);\n                //     throw 'getCheck' + index;\n                // }\n                return check.array[index];\n            },\n            setBase: function (index, base_value) {\n                if (base.array.length - 1 < index) {\n                    realloc(index);\n                }\n                base.array[index] = base_value;\n            },\n            setCheck: function (index, check_value) {\n                if (check.array.length - 1 < index) {\n                    realloc(index);\n                }\n                check.array[index] = check_value;\n            },\n            setFirstUnusedNode: function (index) {\n                // if (!Number.isFinite(index)) {\n                //     throw 'assertion error: setFirstUnusedNode ' + index + ' is not finite number';\n                // }\n                first_unused_node = index;\n            },\n            getFirstUnusedNode: function () {\n                // if (!Number.isFinite(first_unused_node)) {\n                //     throw 'assertion error: getFirstUnusedNode ' + first_unused_node + ' is not finite number';\n                // }\n                return first_unused_node;\n            },\n            shrink: function () {\n                var last_index = this.size() - 1;\n                while (true) {\n                    if (0 <= check.array[last_index]) {\n                        break;\n                    }\n                    last_index--;\n                }\n                base.array = base.array.subarray(0, last_index + 2);   // keep last unused node\n                check.array = check.array.subarray(0, last_index + 2); // keep last unused node\n            },\n            calc: function () {\n                var unused_count = 0;\n                var size = check.array.length;\n                for (var i = 0; i < size; i++) {\n                    if (check.array[i] < 0) {\n                        unused_count++;\n                    }\n                }\n                return {\n                    all: size,\n                    unused: unused_count,\n                    efficiency: (size - unused_count) / size\n                };\n            },\n            dump: function () {\n                // for debug\n                var dump_base = \"\";\n                var dump_check = \"\";\n\n                var i;\n                for (i = 0; i < base.array.length; i++) {\n                    dump_base = dump_base + \" \" + this.getBase(i);\n                }\n                for (i = 0; i < check.array.length; i++) {\n                    dump_check = dump_check + \" \" + this.getCheck(i);\n                }\n\n                console.log(\"base:\" + dump_base);\n                console.log(\"chck:\" + dump_check);\n\n                return \"base:\" + dump_base + \" chck:\" + dump_check;\n            }\n        };\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArrayBuilder(initial_size) {\n        this.bc = newBC(initial_size);  // BASE and CHECK\n        this.keys = [];\n    }\n\n\n    /**\n     * Append a key to initialize set\n     * (This method should be called by dictionary ordered key)\n     *\n     * @param {String} key\n     * @param {Number} value Integer value from 0 to max signed integer number - 1\n     */\n    DoubleArrayBuilder.prototype.append = function (key, record) {\n        this.keys.push({ k: key, v: record });\n        return this;\n    };\n\n    /**\n     * Build double array for given keys\n     *\n     * @param {Array} keys Array of keys. A key is a Object which has properties 'k', 'v'.\n     * 'k' is a key string, 'v' is a record assigned to that key.\n     * @return {DoubleArray} Compiled double array\n     */\n    DoubleArrayBuilder.prototype.build = function (keys, sorted) {\n\n        if (keys == null) {\n            keys = this.keys;\n        }\n\n        if (keys == null) {\n            return new DoubleArray(this.bc);\n        }\n\n        if (sorted == null) {\n            sorted = false;\n        }\n\n        // Convert key string to ArrayBuffer\n        var buff_keys =\n            keys.map(function (k) {\n                return {\n                    k: stringToUtf8Bytes(k.k + TERM_CHAR),\n                    v: k.v\n                };\n            });\n\n        // Sort keys by byte order\n        if (sorted) {\n            this.keys = buff_keys;\n        } else {\n            this.keys =\n                buff_keys.sort(function (k1, k2) {\n                    var b1 = k1.k;\n                    var b2 = k2.k;\n                    var min_length = Math.min(b1.length, b2.length);\n                    for (var pos = 0; pos < min_length; pos++) {\n                        if (b1[pos] === b2[pos]) {\n                            continue;\n                        }\n                        return b1[pos] - b2[pos];\n                    }\n                    return b1.length - b2.length;\n                });\n        }\n\n        buff_keys = null;  // explicit GC\n\n        this._build(ROOT_ID, 0, 0, this.keys.length);\n        return new DoubleArray(this.bc);\n    };\n\n    /**\n     * Append nodes to BASE and CHECK array recursively\n     */\n    DoubleArrayBuilder.prototype._build = function (parent_index, position, start, length) {\n\n        var children_info = this.getChildrenInfo(position, start, length);\n        var _base = this.findAllocatableBase(children_info);\n\n        this.setBC(parent_index, children_info, _base);\n\n        for (var i = 0; i < children_info.length; i = i + 3) {\n            var child_code = children_info[i];\n            if (child_code === TERM_CODE) {\n                continue;\n            }\n            var child_start = children_info[i + 1];\n            var child_len = children_info[i + 2];\n            var child_index = _base + child_code;\n            this._build(child_index, position + 1, child_start, child_len);\n        }\n    };\n\n    DoubleArrayBuilder.prototype.getChildrenInfo = function (position, start, length) {\n        var current_char = this.keys[start].k[position];\n        var i = 0;\n        var children_info = new Int32Array(length * 3);\n\n        children_info[i++] = current_char;  // char (current)\n        children_info[i++] = start;         // start index (current)\n\n        var next_pos = start;\n        var start_pos = start;\n        for (; next_pos < start + length; next_pos++) {\n            var next_char = this.keys[next_pos].k[position];\n            if (current_char !== next_char) {\n                children_info[i++] = next_pos - start_pos;  // length (current)\n\n                children_info[i++] = next_char;             // char (next)\n                children_info[i++] = next_pos;              // start index (next)\n                current_char = next_char;\n                start_pos = next_pos;\n            }\n        }\n        children_info[i++] = next_pos - start_pos;\n        children_info = children_info.subarray(0, i);\n\n        return children_info;\n    };\n\n    DoubleArrayBuilder.prototype.setBC = function (parent_id, children_info, _base) {\n\n        var bc = this.bc;\n\n        bc.setBase(parent_id, _base);  // Update BASE of parent node\n\n        var i;\n        for (i = 0; i < children_info.length; i = i + 3) {\n            var code = children_info[i];\n            var child_id = _base + code;\n\n            // Update linked list of unused nodes\n\n            // Assertion\n            // if (child_id < 0) {\n            //     throw 'assertion error: child_id is negative'\n            // }\n\n            var prev_unused_id = - bc.getBase(child_id);\n            var next_unused_id = - bc.getCheck(child_id);\n            // if (prev_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            // if (next_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            if (child_id !== bc.getFirstUnusedNode()) {\n                bc.setCheck(prev_unused_id, - next_unused_id);\n            } else {\n                // Update first_unused_node\n                bc.setFirstUnusedNode(next_unused_id);\n            }\n            bc.setBase(next_unused_id, - prev_unused_id);\n\n            var check = parent_id;         // CHECK is parent node index\n            bc.setCheck(child_id, check);  // Update CHECK of child node\n\n            // Update record\n            if (code === TERM_CODE) {\n                var start_pos = children_info[i + 1];\n                // var len = children_info[i + 2];\n                // if (len != 1) {\n                //     throw 'assertion error: there are multiple terminal nodes. len:' + len;\n                // }\n                var value = this.keys[start_pos].v;\n\n                if (value == null) {\n                    value = 0;\n                }\n\n                var base = - value - 1;       // BASE is inverted record value\n                bc.setBase(child_id, base);  // Update BASE of child(leaf) node\n            }\n        }\n    };\n\n\n    /**\n     * Find BASE value that all children are allocatable in double array's region\n     */\n    DoubleArrayBuilder.prototype.findAllocatableBase = function (children_info) {\n\n        var bc = this.bc;\n\n        // Assertion: keys are sorted by byte order\n        // var c = -1;\n        // for (var i = 0; i < children_info.length; i = i + 3) {\n        //     if (children_info[i] < c) {\n        //         throw 'assertion error: not sort key'\n        //     }\n        //     c = children_info[i];\n        // }\n\n        // iterate linked list of unused nodes\n        var _base;\n        var curr = bc.getFirstUnusedNode();  // current index\n        // if (curr < 0) {\n        //     throw 'assertion error: getFirstUnusedNode returns negative value'\n        // }\n\n        while (true) {\n            _base = curr - children_info[0];\n\n            if (_base < 0) {\n                curr = - bc.getCheck(curr);  // next\n\n                // if (curr < 0) {\n                //     throw 'assertion error: getCheck returns negative value'\n                // }\n\n                continue;\n            }\n\n            var empty_area_found = true;\n            for (var i = 0; i < children_info.length; i = i + 3) {\n                var code = children_info[i];\n                var candidate_id = _base + code;\n\n                if (!this.isUnusedNode(candidate_id)) {\n                    // candidate_id is used node\n                    // next\n                    curr = - bc.getCheck(curr);\n                    // if (curr < 0) {\n                    //     throw 'assertion error: getCheck returns negative value'\n                    // }\n\n                    empty_area_found = false;\n                    break;\n                }\n            }\n            if (empty_area_found) {\n                // Area is free\n                return _base;\n            }\n        }\n    };\n\n    /**\n     * Check this double array index is unused or not\n     */\n    DoubleArrayBuilder.prototype.isUnusedNode = function (index) {\n        var bc = this.bc;\n        var check = bc.getCheck(index);\n\n        // if (index < 0) {\n        //     throw 'assertion error: isUnusedNode index:' + index;\n        // }\n\n        if (index === ROOT_ID) {\n            // root node\n            return false;\n        }\n        if (check < 0) {\n            // unused\n            return true;\n        }\n\n        // used node (incl. leaf)\n        return false;\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArray(bc) {\n        this.bc = bc;       // BASE and CHECK\n        this.bc.shrink();\n    }\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Boolean} True if this trie contains a given key\n     */\n    DoubleArray.prototype.contain = function (key) {\n\n        var bc = this.bc;\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return false;\n            }\n\n            if (bc.getBase(child) <= 0) {\n                // leaf node\n                return true;\n            } else {\n                // not leaf\n                parent = child;\n                continue;\n            }\n        }\n        return false;\n    };\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Number} Record value assgned to this key, -1 if this key does not contain\n     */\n    DoubleArray.prototype.lookup = function (key) {\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return NOT_FOUND;\n            }\n            parent = child;\n        }\n\n        var base = this.bc.getBase(child);\n        if (base <= 0) {\n            // leaf node\n            return - base - 1;\n        } else {\n            // not leaf\n            return NOT_FOUND;\n        }\n    };\n\n\n    /**\n     * Common prefix search\n     *\n     * @param {String} key\n     * @return {Array} Each result object has 'k' and 'v' (key and record,\n     * respectively) properties assigned to matched string\n     */\n    DoubleArray.prototype.commonPrefixSearch = function (key) {\n\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        var result = [];\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n\n            if (child !== NOT_FOUND) {\n                parent = child;\n\n                // look forward by terminal character code to check this node is a leaf or not\n                var grand_child = this.traverse(child, TERM_CODE);\n\n                if (grand_child !== NOT_FOUND) {\n                    var base = this.bc.getBase(grand_child);\n\n                    var r = {};\n\n                    if (base <= 0) {\n                        // If child is a leaf node, add record to result\n                        r.v = - base - 1;\n                    }\n\n                    // If child is a leaf node, add word to result\n                    r.k = utf8BytesToString(arrayCopy(buffer, 0, i + 1));\n\n                    result.push(r);\n                }\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    DoubleArray.prototype.traverse = function (parent, code) {\n        var child = this.bc.getBase(parent) + code;\n        if (this.bc.getCheck(child) === parent) {\n            return child;\n        } else {\n            return NOT_FOUND;\n        }\n    };\n\n    DoubleArray.prototype.size = function () {\n        return this.bc.size();\n    };\n\n    DoubleArray.prototype.calc = function () {\n        return this.bc.calc();\n    };\n\n    DoubleArray.prototype.dump = function () {\n        return this.bc.dump();\n    };\n\n\n    // Array utility functions\n\n    var newArrayBuffer = function (signed, bytes, size) {\n        if (signed) {\n            switch(bytes) {\n                case 1:\n                return new Int8Array(size);\n                case 2:\n                return new Int16Array(size);\n                case 4:\n                return new Int32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        } else {\n            switch(bytes) {\n                case 1:\n                return new Uint8Array(size);\n                case 2:\n                return new Uint16Array(size);\n                case 4:\n                return new Uint32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        }\n    };\n\n    var arrayCopy = function (src, src_offset, length) {\n        var buffer = new ArrayBuffer(length);\n        var dstU8 = new Uint8Array(buffer, 0, length);\n        var srcU8 = src.subarray(src_offset, length);\n        dstU8.set(srcU8);\n        return dstU8;\n    };\n\n\n    /**\n     * Convert String (UTF-16) to UTF-8 ArrayBuffer\n     *\n     * @param {String} str UTF-16 string to convert\n     * @return {Uint8Array} Byte sequence encoded by UTF-8\n     */\n    var stringToUtf8Bytes = function (str) {\n\n        // Max size of 1 character is 4 bytes\n        var bytes = new Uint8Array(new ArrayBuffer(str.length * 4));\n\n        var i = 0, j = 0;\n\n        while (i < str.length) {\n            var unicode_code;\n\n            var utf16_code = str.charCodeAt(i++);\n            if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n                // surrogate pair\n                var upper = utf16_code;           // high surrogate\n                var lower = str.charCodeAt(i++);  // low surrogate\n\n                if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                    unicode_code =\n                        (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                        (lower - 0xDC00);\n                } else {\n                    // malformed surrogate pair\n                    return null;\n                }\n            } else {\n                // not surrogate code\n                unicode_code = utf16_code;\n            }\n\n            if (unicode_code < 0x80) {\n                // 1-byte\n                bytes[j++] = unicode_code;\n\n            } else if (unicode_code < (1 << 11)) {\n                // 2-byte\n                bytes[j++] = (unicode_code >>> 6) | 0xC0;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 16)) {\n                // 3-byte\n                bytes[j++] = (unicode_code >>> 12) | 0xE0;\n                bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 21)) {\n                // 4-byte\n                bytes[j++] = (unicode_code >>> 18) | 0xF0;\n                bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n                bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else {\n                // malformed UCS4 code\n            }\n        }\n\n        return bytes.subarray(0, j);\n    };\n\n\n    /**\n     * Convert UTF-8 ArrayBuffer to String (UTF-16)\n     *\n     * @param {Uint8Array} bytes UTF-8 byte sequence to convert\n     * @return {String} String encoded by UTF-16\n     */\n    var utf8BytesToString = function (bytes) {\n\n        var str = \"\";\n        var code, b1, b2, b3, b4, upper, lower;\n        var i = 0;\n\n        while (i < bytes.length) {\n\n            b1 = bytes[i++];\n\n            if (b1 < 0x80) {\n                // 1 byte\n                code = b1;\n            } else if ((b1 >> 5) === 0x06) {\n                // 2 bytes\n                b2 = bytes[i++];\n                code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n            } else if ((b1 >> 4) === 0x0e) {\n                // 3 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n            } else {\n                // 4 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                b4 = bytes[i++];\n                code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n            }\n\n            if (code < 0x10000) {\n\t            str += String.fromCharCode(code);\n            } else {\n\t            // surrogate pair\n\t            code -= 0x10000;\n\t            upper = (0xD800 | (code >> 10));\n\t            lower = (0xDC00 | (code & 0x3FF));\n\t            str += String.fromCharCode(upper, lower);\n            }\n        }\n\n        return str;\n    };\n\n\n    // public methods\n    var doublearray = {\n        builder: function (initial_size) {\n            return new DoubleArrayBuilder(initial_size);\n        },\n        load: function (base_buffer, check_buffer) {\n            var bc = newBC(0);\n            bc.loadBaseBuffer(base_buffer);\n            bc.loadCheckBuffer(check_buffer);\n            return new DoubleArray(bc);\n        }\n    };\n\n    if (\"undefined\" === typeof module) {\n\t    // In browser\n        window.doublearray = doublearray;\n    } else {\n\t    // In node\n        module.exports = doublearray;\n    }\n\n})();\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Convert String (UTF-16) to UTF-8 ArrayBuffer\n *\n * @param {String} str UTF-16 string to convert\n * @return {Uint8Array} Byte sequence encoded by UTF-8\n */\nvar stringToUtf8Bytes = function (str) {\n\n    // Max size of 1 character is 4 bytes\n    var bytes = new Uint8Array(str.length * 4);\n\n    var i = 0, j = 0;\n\n    while (i < str.length) {\n        var unicode_code;\n\n        var utf16_code = str.charCodeAt(i++);\n        if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n            // surrogate pair\n            var upper = utf16_code;           // high surrogate\n            var lower = str.charCodeAt(i++);  // low surrogate\n\n            if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                unicode_code =\n                    (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                    (lower - 0xDC00);\n            } else {\n                // malformed surrogate pair\n                return null;\n            }\n        } else {\n            // not surrogate code\n            unicode_code = utf16_code;\n        }\n\n        if (unicode_code < 0x80) {\n            // 1-byte\n            bytes[j++] = unicode_code;\n\n        } else if (unicode_code < (1 << 11)) {\n            // 2-byte\n            bytes[j++] = (unicode_code >>> 6) | 0xC0;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 16)) {\n            // 3-byte\n            bytes[j++] = (unicode_code >>> 12) | 0xE0;\n            bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else if (unicode_code < (1 << 21)) {\n            // 4-byte\n            bytes[j++] = (unicode_code >>> 18) | 0xF0;\n            bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n            bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n            bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n        } else {\n            // malformed UCS4 code\n        }\n    }\n\n    return bytes.subarray(0, j);\n};\n\n/**\n * Convert UTF-8 ArrayBuffer to String (UTF-16)\n *\n * @param {Array} bytes UTF-8 byte sequence to convert\n * @return {String} String encoded by UTF-16\n */\nvar utf8BytesToString = function (bytes) {\n\n    var str = \"\";\n    var code, b1, b2, b3, b4, upper, lower;\n    var i = 0;\n\n    while (i < bytes.length) {\n\n        b1 = bytes[i++];\n\n        if (b1 < 0x80) {\n            // 1 byte\n            code = b1;\n        } else if ((b1 >> 5) === 0x06) {\n            // 2 bytes\n            b2 = bytes[i++];\n            code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n        } else if ((b1 >> 4) === 0x0e) {\n            // 3 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n        } else {\n            // 4 bytes\n            b2 = bytes[i++];\n            b3 = bytes[i++];\n            b4 = bytes[i++];\n            code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n        }\n\n        if (code < 0x10000) {\n            str += String.fromCharCode(code);\n        } else {\n            // surrogate pair\n            code -= 0x10000;\n            upper = (0xD800 | (code >> 10));\n            lower = (0xDC00 | (code & 0x3FF));\n            str += String.fromCharCode(upper, lower);\n        }\n    }\n\n    return str;\n};\n\n/**\n * Utilities to manipulate byte sequence\n * @param {(number|Uint8Array)} arg Initial size of this buffer (number), or buffer to set (Uint8Array)\n * @constructor\n */\nfunction ByteBuffer(arg) {\n    var initial_size;\n    if (arg == null) {\n        initial_size = 1024 * 1024;\n    } else if (typeof arg === \"number\") {\n        initial_size = arg;\n    } else if (arg instanceof Uint8Array) {\n        this.buffer = arg;\n        this.position = 0;  // Overwrite\n        return;\n    } else {\n        // typeof arg -> String\n        throw typeof arg + \" is invalid parameter type for ByteBuffer constructor\";\n    }\n    // arg is null or number\n    this.buffer = new Uint8Array(initial_size);\n    this.position = 0;\n}\n\nByteBuffer.prototype.size = function () {\n    return this.buffer.length;\n};\n\nByteBuffer.prototype.reallocate = function () {\n    var new_array = new Uint8Array(this.buffer.length * 2);\n    new_array.set(this.buffer);\n    this.buffer = new_array;\n};\n\nByteBuffer.prototype.shrink = function () {\n    this.buffer = this.buffer.subarray(0, this.position);\n    return this.buffer;\n};\n\nByteBuffer.prototype.put = function (b) {\n    if (this.buffer.length < this.position + 1) {\n        this.reallocate();\n    }\n    this.buffer[this.position++] = b;\n};\n\nByteBuffer.prototype.get = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 1;\n    }\n    if (this.buffer.length < index + 1) {\n        return 0;\n    }\n    return this.buffer[index];\n};\n\n// Write short to buffer by little endian\nByteBuffer.prototype.putShort = function (num) {\n    if (0xFFFF < num) {\n        throw num + \" is over short value\";\n    }\n    var lower = (0x00FF & num);\n    var upper = (0xFF00 & num) >> 8;\n    this.put(lower);\n    this.put(upper);\n};\n\n// Read short from buffer by little endian\nByteBuffer.prototype.getShort = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 2;\n    }\n    if (this.buffer.length < index + 2) {\n        return 0;\n    }\n    var lower = this.buffer[index];\n    var upper = this.buffer[index + 1];\n    var value = (upper << 8) + lower;\n    if (value & 0x8000) {\n\tvalue = -((value - 1) ^ 0xFFFF);\n    }\n    return value;\n};\n\n// Write integer to buffer by little endian\nByteBuffer.prototype.putInt = function (num) {\n    if (0xFFFFFFFF < num) {\n        throw num + \" is over integer value\";\n    }\n    var b0 = (0x000000FF & num);\n    var b1 = (0x0000FF00 & num) >> 8;\n    var b2 = (0x00FF0000 & num) >> 16;\n    var b3 = (0xFF000000 & num) >> 24;\n    this.put(b0);\n    this.put(b1);\n    this.put(b2);\n    this.put(b3);\n};\n\n// Read integer from buffer by little endian\nByteBuffer.prototype.getInt = function (index) {\n    if (index == null) {\n        index = this.position;\n        this.position += 4;\n    }\n    if (this.buffer.length < index + 4) {\n        return 0;\n    }\n    var b0 = this.buffer[index];\n    var b1 = this.buffer[index + 1];\n    var b2 = this.buffer[index + 2];\n    var b3 = this.buffer[index + 3];\n\n    return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0;\n};\n\nByteBuffer.prototype.readInt = function () {\n    var pos = this.position;\n    this.position += 4;\n    return this.getInt(pos);\n};\n\nByteBuffer.prototype.putString = function (str) {\n    var bytes = stringToUtf8Bytes(str);\n    for (var i = 0; i < bytes.length; i++) {\n        this.put(bytes[i]);\n    }\n    // put null character as terminal character\n    this.put(0);\n};\n\nByteBuffer.prototype.getString = function (index) {\n    var buf = [],\n        ch;\n    if (index == null) {\n        index = this.position;\n    }\n    while (true) {\n        if (this.buffer.length < index + 1) {\n            break;\n        }\n        ch = this.get(index++);\n        if (ch === 0) {\n            break;\n        } else {\n            buf.push(ch);\n        }\n    }\n    this.position = index;\n    return utf8BytesToString(buf);\n};\n\nmodule.exports = ByteBuffer;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ByteBuffer = require(\"../util/ByteBuffer\");\n\n/**\n * TokenInfoDictionary\n * @constructor\n */\nfunction TokenInfoDictionary() {\n    this.dictionary = new ByteBuffer(10 * 1024 * 1024);\n    this.target_map = {};  // trie_id (of surface form) -> token_info_id (of token)\n    this.pos_buffer = new ByteBuffer(10 * 1024 * 1024);\n}\n\n// left_id right_id word_cost ...\n// ^ this position is token_info_id\nTokenInfoDictionary.prototype.buildDictionary = function (entries) {\n    var dictionary_entries = {};  // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n\n    for (var i = 0; i < entries.length; i++) {\n        var entry = entries[i];\n\n        if (entry.length < 4) {\n            continue;\n        }\n\n        var surface_form = entry[0];\n        var left_id = entry[1];\n        var right_id = entry[2];\n        var word_cost = entry[3];\n        var feature = entry.slice(4).join(\",\");  // TODO Optimize\n\n        // Assertion\n        if (!isFinite(left_id) || !isFinite(right_id) || !isFinite(word_cost)) {\n            console.log(entry);\n        }\n\n        var token_info_id = this.put(left_id, right_id, word_cost, surface_form, feature);\n        dictionary_entries[token_info_id] = surface_form;\n    }\n\n    // Remove last unused area\n    this.dictionary.shrink();\n    this.pos_buffer.shrink();\n\n    return dictionary_entries;\n};\n\nTokenInfoDictionary.prototype.put = function (left_id, right_id, word_cost, surface_form, feature) {\n    var token_info_id = this.dictionary.position;\n    var pos_id = this.pos_buffer.position;\n\n    this.dictionary.putShort(left_id);\n    this.dictionary.putShort(right_id);\n    this.dictionary.putShort(word_cost);\n    this.dictionary.putInt(pos_id);\n    this.pos_buffer.putString(surface_form + \",\" + feature);\n\n    return token_info_id;\n};\n\nTokenInfoDictionary.prototype.addMapping = function (source, target) {\n    var mapping = this.target_map[source];\n    if (mapping == null) {\n        mapping = [];\n    }\n    mapping.push(target);\n\n    this.target_map[source] = mapping;\n};\n\nTokenInfoDictionary.prototype.targetMapToBuffer = function () {\n    var buffer = new ByteBuffer();\n    var map_keys_size = Object.keys(this.target_map).length;\n    buffer.putInt(map_keys_size);\n    for (var key in this.target_map) {\n        var values = this.target_map[key];  // Array\n        var map_values_size = values.length;\n        buffer.putInt(parseInt(key));\n        buffer.putInt(map_values_size);\n        for (var i = 0; i < values.length; i++) {\n            buffer.putInt(values[i]);\n        }\n    }\n    return buffer.shrink();  // Shrink-ed Typed Array\n};\n\n// from tid.dat\nTokenInfoDictionary.prototype.loadDictionary = function (array_buffer) {\n    this.dictionary = new ByteBuffer(array_buffer);\n    return this;\n};\n\n// from tid_pos.dat\nTokenInfoDictionary.prototype.loadPosVector = function (array_buffer) {\n    this.pos_buffer = new ByteBuffer(array_buffer);\n    return this;\n};\n\n// from tid_map.dat\nTokenInfoDictionary.prototype.loadTargetMap = function (array_buffer) {\n    var buffer = new ByteBuffer(array_buffer);\n    buffer.position = 0;\n    this.target_map = {};\n    buffer.readInt();  // map_keys_size\n    while (true) {\n        if (buffer.buffer.length < buffer.position + 1) {\n            break;\n        }\n        var key = buffer.readInt();\n        var map_values_size = buffer.readInt();\n        for (var i = 0; i < map_values_size; i++) {\n            var value = buffer.readInt();\n            this.addMapping(key, value);\n        }\n    }\n    return this;\n};\n\n/**\n * Look up features in the dictionary\n * @param {string} token_info_id_str Word ID to look up\n * @returns {string} Features string concatenated by \",\"\n */\nTokenInfoDictionary.prototype.getFeatures = function (token_info_id_str) {\n    var token_info_id = parseInt(token_info_id_str);\n    if (isNaN(token_info_id)) {\n        // TODO throw error\n        return \"\";\n    }\n    var pos_id = this.dictionary.getInt(token_info_id + 6);\n    return this.pos_buffer.getString(pos_id);\n};\n\nmodule.exports = TokenInfoDictionary;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n    this.forward_dimension = forward_dimension;\n    this.backward_dimension = backward_dimension;\n\n    // leading 2 integers for forward_dimension, backward_dimension, respectively\n    this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n    this.buffer[0] = forward_dimension;\n    this.buffer[1] = backward_dimension;\n}\n\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    this.buffer[index] = cost;\n};\n\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    return this.buffer[index];\n};\n\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n    this.forward_dimension = connection_costs_buffer[0];\n    this.backward_dimension = connection_costs_buffer[1];\n    this.buffer = connection_costs_buffer;\n};\n\nmodule.exports = ConnectionCosts;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * CharacterClass\n * @param {number} class_id\n * @param {string} class_name\n * @param {boolean} is_always_invoke\n * @param {boolean} is_grouping\n * @param {number} max_length\n * @constructor\n */\nfunction CharacterClass(class_id, class_name, is_always_invoke, is_grouping, max_length) {\n    this.class_id = class_id;\n    this.class_name = class_name;\n    this.is_always_invoke = is_always_invoke;\n    this.is_grouping = is_grouping;\n    this.max_length = max_length;\n}\n\nmodule.exports = CharacterClass;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ByteBuffer = require(\"../util/ByteBuffer\");\nvar CharacterClass = require(\"./CharacterClass\");\n\n/**\n * InvokeDefinitionMap represents invoke definition a part of char.def\n * @constructor\n */\nfunction InvokeDefinitionMap() {\n    this.map = [];\n    this.lookup_table = {};  // Just for building dictionary\n}\n\n/**\n * Load InvokeDefinitionMap from buffer\n * @param {Uint8Array} invoke_def_buffer\n * @returns {InvokeDefinitionMap}\n */\nInvokeDefinitionMap.load = function (invoke_def_buffer) {\n    var invoke_def = new InvokeDefinitionMap();\n    var character_category_definition = [];\n\n    var buffer = new ByteBuffer(invoke_def_buffer);\n    while (buffer.position + 1 < buffer.size()) {\n        var class_id = character_category_definition.length;\n        var is_always_invoke = buffer.get();\n        var is_grouping = buffer.get();\n        var max_length = buffer.getInt();\n        var class_name = buffer.getString();\n        character_category_definition.push(new CharacterClass(class_id, class_name, is_always_invoke, is_grouping, max_length));\n    }\n\n    invoke_def.init(character_category_definition);\n\n    return invoke_def;\n};\n\n/**\n * Initializing method\n * @param {Array.<CharacterClass>} character_category_definition Array of CharacterClass\n */\nInvokeDefinitionMap.prototype.init = function (character_category_definition) {\n    if (character_category_definition == null) {\n        return;\n    }\n    for (var i = 0; i < character_category_definition.length; i++) {\n        var character_class = character_category_definition[i];\n        this.map[i] = character_class;\n        this.lookup_table[character_class.class_name] = i;\n    }\n};\n\n/**\n * Get class information by class ID\n * @param {number} class_id\n * @returns {CharacterClass}\n */\nInvokeDefinitionMap.prototype.getCharacterClass = function (class_id) {\n    return this.map[class_id];\n};\n\n/**\n * For building character definition dictionary\n * @param {string} class_name character\n * @returns {number} class_id\n */\nInvokeDefinitionMap.prototype.lookup = function (class_name) {\n    var class_id = this.lookup_table[class_name];\n    if (class_id == null) {\n        return null;\n    }\n    return class_id;\n};\n\n/**\n * Transform from map to binary buffer\n * @returns {Uint8Array}\n */\nInvokeDefinitionMap.prototype.toBuffer = function () {\n    var buffer = new ByteBuffer();\n    for (var i = 0; i < this.map.length; i++) {\n        var char_class = this.map[i];\n        buffer.put(char_class.is_always_invoke);\n        buffer.put(char_class.is_grouping);\n        buffer.putInt(char_class.max_length);\n        buffer.putString(char_class.class_name);\n    }\n    buffer.shrink();\n    return buffer.buffer;\n};\n\nmodule.exports = InvokeDefinitionMap;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar InvokeDefinitionMap = require(\"./InvokeDefinitionMap\");\nvar CharacterClass = require(\"./CharacterClass\");\nvar SurrogateAwareString = require(\"../util/SurrogateAwareString\");\n\nvar DEFAULT_CATEGORY = \"DEFAULT\";\n\n/**\n * CharacterDefinition represents char.def file and\n * defines behavior of unknown word processing\n * @constructor\n */\nfunction CharacterDefinition() {\n    this.character_category_map = new Uint8Array(65536);  // for all UCS2 code points\n    this.compatible_category_map = new Uint32Array(65536);  // for all UCS2 code points\n    this.invoke_definition_map = null;\n}\n\n/**\n * Load CharacterDefinition\n * @param {Uint8Array} cat_map_buffer\n * @param {Uint32Array} compat_cat_map_buffer\n * @param {InvokeDefinitionMap} invoke_def_buffer\n * @returns {CharacterDefinition}\n */\nCharacterDefinition.load = function (cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    var char_def = new CharacterDefinition();\n    char_def.character_category_map = cat_map_buffer;\n    char_def.compatible_category_map = compat_cat_map_buffer;\n    char_def.invoke_definition_map = InvokeDefinitionMap.load(invoke_def_buffer);\n    return char_def;\n};\n\nCharacterDefinition.parseCharCategory = function (class_id, parsed_category_def) {\n    var category = parsed_category_def[1];\n    var invoke = parseInt(parsed_category_def[2]);\n    var grouping = parseInt(parsed_category_def[3]);\n    var max_length = parseInt(parsed_category_def[4]);\n    if (!isFinite(invoke) || (invoke !== 0 && invoke !== 1)) {\n        console.log(\"char.def parse error. INVOKE is 0 or 1 in:\" + invoke);\n        return null;\n    }\n    if (!isFinite(grouping) || (grouping !== 0 && grouping !== 1)) {\n        console.log(\"char.def parse error. GROUP is 0 or 1 in:\" + grouping);\n        return null;\n    }\n    if (!isFinite(max_length) || max_length < 0) {\n        console.log(\"char.def parse error. LENGTH is 1 to n:\" + max_length);\n        return null;\n    }\n    var is_invoke = (invoke === 1);\n    var is_grouping = (grouping === 1);\n\n    return new CharacterClass(class_id, category, is_invoke, is_grouping, max_length);\n};\n\nCharacterDefinition.parseCategoryMapping = function (parsed_category_mapping) {\n    var start = parseInt(parsed_category_mapping[1]);\n    var default_category = parsed_category_mapping[2];\n    var compatible_category = (3 < parsed_category_mapping.length) ? parsed_category_mapping.slice(3) : [];\n    if (!isFinite(start) || start < 0 || start > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + start);\n    }\n    return { start: start, default: default_category, compatible: compatible_category};\n};\n\nCharacterDefinition.parseRangeCategoryMapping = function (parsed_category_mapping) {\n    var start = parseInt(parsed_category_mapping[1]);\n    var end = parseInt(parsed_category_mapping[2]);\n    var default_category = parsed_category_mapping[3];\n    var compatible_category = (4 < parsed_category_mapping.length) ? parsed_category_mapping.slice(4) : [];\n    if (!isFinite(start) || start < 0 || start > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + start);\n    }\n    if (!isFinite(end) || end < 0 || end > 0xFFFF) {\n        console.log(\"char.def parse error. CODE is invalid:\" + end);\n    }\n    return { start: start, end: end, default: default_category, compatible: compatible_category};\n};\n\n/**\n * Initializing method\n * @param {Array} category_mapping Array of category mapping\n */\nCharacterDefinition.prototype.initCategoryMappings = function (category_mapping) {\n    // Initialize map by DEFAULT class\n    var code_point;\n    if (category_mapping != null) {\n        for (var i = 0; i < category_mapping.length; i++) {\n            var mapping = category_mapping[i];\n            var end = mapping.end || mapping.start;\n            for (code_point = mapping.start; code_point <= end; code_point++) {\n\n                // Default Category class ID\n                this.character_category_map[code_point] = this.invoke_definition_map.lookup(mapping.default);\n\n                for (var j = 0; j < mapping.compatible.length; j++) {\n                    var bitset = this.compatible_category_map[code_point];\n                    var compatible_category = mapping.compatible[j];\n                    if (compatible_category == null) {\n                        continue;\n                    }\n                    var class_id = this.invoke_definition_map.lookup(compatible_category);  // Default Category\n                    if (class_id == null) {\n                        continue;\n                    }\n                    var class_id_bit = 1 << class_id;\n                    bitset = bitset | class_id_bit;  // Set a bit of class ID \u4F8B\u3048\u3070\u3001class_id\u304C3\u306E\u3068\u304D\u30013\u30D3\u30C3\u30C8\u76EE\u306B1\u3092\u7ACB\u3066\u308B\n                    this.compatible_category_map[code_point] = bitset;\n                }\n            }\n        }\n    }\n    var default_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    if (default_id == null) {\n        return;\n    }\n    for (code_point = 0; code_point < this.character_category_map.length; code_point++) {\n        // \u4ED6\u306B\u4F55\u306E\u30AF\u30E9\u30B9\u3082\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u306A\u304B\u3063\u305F\u3068\u304D\u3060\u3051 DEFAULT\n        if (this.character_category_map[code_point] === 0) {\n            // DEFAULT class ID \u306B\u5BFE\u5FDC\u3059\u308B\u30D3\u30C3\u30C8\u3060\u30511\u3092\u7ACB\u3066\u308B\n            this.character_category_map[code_point] = 1 << default_id;\n        }\n    }\n};\n\n/**\n * Lookup compatible categories for a character (not included 1st category)\n * @param {string} ch UCS2 character (just 1st character is effective)\n * @returns {Array.<CharacterClass>} character classes\n */\nCharacterDefinition.prototype.lookupCompatibleCategory = function (ch) {\n    var classes = [];\n\n    /*\n     if (SurrogateAwareString.isSurrogatePair(ch)) {\n     // Surrogate pair character codes can not be defined by char.def\n     return classes;\n     }*/\n    var code = ch.charCodeAt(0);\n    var integer;\n    if (code < this.compatible_category_map.length) {\n        integer = this.compatible_category_map[code];  // Bitset\n    }\n\n    if (integer == null || integer === 0) {\n        return classes;\n    }\n\n    for (var bit = 0; bit < 32; bit++) {  // Treat \"bit\" as a class ID\n        if (((integer << (31 - bit)) >>> 31) === 1) {\n            var character_class = this.invoke_definition_map.getCharacterClass(bit);\n            if (character_class == null) {\n                continue;\n            }\n            classes.push(character_class);\n        }\n    }\n    return classes;\n};\n\n\n/**\n * Lookup category for a character\n * @param {string} ch UCS2 character (just 1st character is effective)\n * @returns {CharacterClass} character class\n */\nCharacterDefinition.prototype.lookup = function (ch) {\n\n    var class_id;\n\n    var code = ch.charCodeAt(0);\n    if (SurrogateAwareString.isSurrogatePair(ch)) {\n        // Surrogate pair character codes can not be defined by char.def, so set DEFAULT category\n        class_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    } else if (code < this.character_category_map.length) {\n        class_id = this.character_category_map[code];  // Read as integer value\n    }\n\n    if (class_id == null) {\n        class_id = this.invoke_definition_map.lookup(DEFAULT_CATEGORY);\n    }\n\n    return this.invoke_definition_map.getCharacterClass(class_id);\n};\n\nmodule.exports = CharacterDefinition;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\nvar CharacterDefinition = require(\"./CharacterDefinition\");\nvar ByteBuffer = require(\"../util/ByteBuffer\");\n\n/**\n * UnknownDictionary\n * @constructor\n */\nfunction UnknownDictionary() {\n    this.dictionary = new ByteBuffer(10 * 1024 * 1024);\n    this.target_map = {};  // class_id (of CharacterClass) -> token_info_id (of unknown class)\n    this.pos_buffer = new ByteBuffer(10 * 1024 * 1024);\n    this.character_definition = null;\n}\n\n// Inherit from TokenInfoDictionary as a super class\nUnknownDictionary.prototype = Object.create(TokenInfoDictionary.prototype);\n\nUnknownDictionary.prototype.characterDefinition = function (character_definition) {\n    this.character_definition = character_definition;\n    return this;\n};\n\nUnknownDictionary.prototype.lookup = function (ch) {\n    return this.character_definition.lookup(ch);\n};\n\nUnknownDictionary.prototype.lookupCompatibleCategory = function (ch) {\n    return this.character_definition.lookupCompatibleCategory(ch);\n};\n\nUnknownDictionary.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    this.loadDictionary(unk_buffer);\n    this.loadPosVector(unk_pos_buffer);\n    this.loadTargetMap(unk_map_buffer);\n    this.character_definition = CharacterDefinition.load(cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n};\n\nmodule.exports = UnknownDictionary;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\nvar TokenInfoDictionary = require(\"./TokenInfoDictionary\");\nvar ConnectionCosts = require(\"./ConnectionCosts\");\nvar UnknownDictionary = require(\"./UnknownDictionary\");\n\n/**\n * Dictionaries container for Tokenizer\n * @param {DoubleArray} trie\n * @param {TokenInfoDictionary} token_info_dictionary\n * @param {ConnectionCosts} connection_costs\n * @param {UnknownDictionary} unknown_dictionary\n * @constructor\n */\nfunction DynamicDictionaries(trie, token_info_dictionary, connection_costs, unknown_dictionary) {\n    if (trie != null) {\n        this.trie = trie;\n    } else {\n        this.trie = doublearray.builder(0).build([\n            {k: \"\", v: 1}\n        ]);\n    }\n    if (token_info_dictionary != null) {\n        this.token_info_dictionary = token_info_dictionary;\n    } else {\n        this.token_info_dictionary = new TokenInfoDictionary();\n    }\n    if (connection_costs != null) {\n        this.connection_costs = connection_costs;\n    } else {\n        // backward_size * backward_size\n        this.connection_costs = new ConnectionCosts(0, 0);\n    }\n    if (unknown_dictionary != null) {\n        this.unknown_dictionary = unknown_dictionary;\n    } else {\n        this.unknown_dictionary = new UnknownDictionary();\n    }\n}\n\n// from base.dat & check.dat\nDynamicDictionaries.prototype.loadTrie = function (base_buffer, check_buffer) {\n    this.trie = doublearray.load(base_buffer, check_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadTokenInfoDictionaries = function (token_info_buffer, pos_buffer, target_map_buffer) {\n    this.token_info_dictionary.loadDictionary(token_info_buffer);\n    this.token_info_dictionary.loadPosVector(pos_buffer);\n    this.token_info_dictionary.loadTargetMap(target_map_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadConnectionCosts = function (cc_buffer) {\n    this.connection_costs.loadConnectionCosts(cc_buffer);\n    return this;\n};\n\nDynamicDictionaries.prototype.loadUnknownDictionaries = function (unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer) {\n    this.unknown_dictionary.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n    return this;\n};\n\nmodule.exports = DynamicDictionaries;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar path = require(\"path\");\nvar async = require(\"async\");\nvar DynamicDictionaries = require(\"../dict/DynamicDictionaries\");\n\n/**\n * DictionaryLoader base constructor\n * @param {string} dic_path Dictionary path\n * @constructor\n */\nfunction DictionaryLoader(dic_path) {\n    this.dic = new DynamicDictionaries();\n    this.dic_path = dic_path;\n}\n\nDictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {\n    throw new Error(\"DictionaryLoader#loadArrayBuffer should be overwrite\");\n};\n\n/**\n * Load dictionary files\n * @param {DictionaryLoader~onLoad} load_callback Callback function called after loaded\n */\nDictionaryLoader.prototype.load = function (load_callback) {\n    var dic = this.dic;\n    var dic_path = this.dic_path;\n    var loadArrayBuffer = this.loadArrayBuffer;\n\n    async.parallel([\n        // Trie\n        function (callback) {\n            async.map([ \"base.dat.gz\", \"check.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var base_buffer = new Int32Array(buffers[0]);\n                var check_buffer = new Int32Array(buffers[1]);\n\n                dic.loadTrie(base_buffer, check_buffer);\n                callback(null);\n            });\n        },\n        // Token info dictionaries\n        function (callback) {\n            async.map([ \"tid.dat.gz\", \"tid_pos.dat.gz\", \"tid_map.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var token_info_buffer = new Uint8Array(buffers[0]);\n                var pos_buffer = new Uint8Array(buffers[1]);\n                var target_map_buffer = new Uint8Array(buffers[2]);\n\n                dic.loadTokenInfoDictionaries(token_info_buffer, pos_buffer, target_map_buffer);\n                callback(null);\n            });\n        },\n        // Connection cost matrix\n        function (callback) {\n            loadArrayBuffer(path.join(dic_path, \"cc.dat.gz\"), function (err, buffer) {\n                if(err) {\n                    return callback(err);\n                }\n                var cc_buffer = new Int16Array(buffer);\n                dic.loadConnectionCosts(cc_buffer);\n                callback(null);\n            });\n        },\n        // Unknown dictionaries\n        function (callback) {\n            async.map([ \"unk.dat.gz\", \"unk_pos.dat.gz\", \"unk_map.dat.gz\", \"unk_char.dat.gz\", \"unk_compat.dat.gz\", \"unk_invoke.dat.gz\" ], function (filename, _callback) {\n                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {\n                    if(err) {\n                        return _callback(err);\n                    }\n                    _callback(null, buffer);\n                });\n            }, function (err, buffers) {\n                if(err) {\n                    return callback(err);\n                }\n                var unk_buffer = new Uint8Array(buffers[0]);\n                var unk_pos_buffer = new Uint8Array(buffers[1]);\n                var unk_map_buffer = new Uint8Array(buffers[2]);\n                var cat_map_buffer = new Uint8Array(buffers[3]);\n                var compat_cat_map_buffer = new Uint32Array(buffers[4]);\n                var invoke_def_buffer = new Uint8Array(buffers[5]);\n\n                dic.loadUnknownDictionaries(unk_buffer, unk_pos_buffer, unk_map_buffer, cat_map_buffer, compat_cat_map_buffer, invoke_def_buffer);\n                // dic.loadUnknownDictionaries(char_buffer, unk_buffer);\n                callback(null);\n            });\n        }\n    ], function (err) {\n        load_callback(err, dic);\n    });\n};\n\n/**\n * Callback\n * @callback DictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {DynamicDictionaries} dic Loaded dictionary\n */\n\nmodule.exports = DictionaryLoader;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar zlib = require(\"zlibjs/bin/gunzip.min.js\");\nvar DictionaryLoader = require(\"./DictionaryLoader\");\n\n/**\n * BrowserDictionaryLoader inherits DictionaryLoader, using jQuery XHR for download\n * @param {string} dic_path Dictionary path\n * @constructor\n */\nfunction BrowserDictionaryLoader(dic_path) {\n    DictionaryLoader.apply(this, [dic_path]);\n}\n\nBrowserDictionaryLoader.prototype = Object.create(DictionaryLoader.prototype);\n\n/**\n * Utility function to load gzipped dictionary\n * @param {string} url Dictionary URL\n * @param {BrowserDictionaryLoader~onLoad} callback Callback function\n */\nBrowserDictionaryLoader.prototype.loadArrayBuffer = function (url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.onload = function () {\n        if (this.status > 0 && this.status !== 200) {\n            callback(xhr.statusText, null);\n            return;\n        }\n        var arraybuffer = this.response;\n\n        var gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer));\n        var typed_array = gz.decompress();\n        callback(null, typed_array.buffer);\n    };\n    xhr.onerror = function (err) {\n        callback(err, null);\n    };\n    xhr.send();\n};\n\n/**\n * Callback\n * @callback BrowserDictionaryLoader~onLoad\n * @param {Object} err Error object\n * @param {Uint8Array} buffer Loaded buffer\n */\n\nmodule.exports = BrowserDictionaryLoader;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Tokenizer = require(\"./Tokenizer\");\nvar DictionaryLoader = require(\"./loader/NodeDictionaryLoader\");\n\n/**\n * TokenizerBuilder create Tokenizer instance.\n * @param {Object} option JSON object which have key-value pairs settings\n * @param {string} option.dicPath Dictionary directory path (or URL using in browser)\n * @constructor\n */\nfunction TokenizerBuilder(option) {\n    if (option.dicPath == null) {\n        this.dic_path = \"dict/\";\n    } else {\n        this.dic_path = option.dicPath;\n    }\n}\n\n/**\n * Build Tokenizer instance by asynchronous manner\n * @param {TokenizerBuilder~onLoad} callback Callback function\n */\nTokenizerBuilder.prototype.build = function (callback) {\n    var loader = new DictionaryLoader(this.dic_path);\n    loader.load(function (err, dic) {\n        callback(err, new Tokenizer(dic));\n    });\n};\n\n/**\n * Callback used by build\n * @callback TokenizerBuilder~onLoad\n * @param {Object} err Error object\n * @param {Tokenizer} tokenizer Prepared Tokenizer\n */\n\nmodule.exports = TokenizerBuilder;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ConnectionCosts = require(\"../ConnectionCosts\");\n\n/**\n * Builder class for constructing ConnectionCosts object\n * @constructor\n */\nfunction ConnectionCostsBuilder() {\n    this.lines = 0;\n    this.connection_cost = null;\n}\n\nConnectionCostsBuilder.prototype.putLine = function (line) {\n    if (this.lines === 0) {\n        var dimensions = line.split(\" \");\n        var forward_dimension = dimensions[0];\n        var backward_dimension = dimensions[1];\n\n        if (forward_dimension < 0 || backward_dimension < 0) {\n            throw \"Parse error of matrix.def\";\n        }\n\n        this.connection_cost = new ConnectionCosts(forward_dimension, backward_dimension);\n        this.lines++;\n        return this;\n    }\n\n    var costs = line.split(\" \");\n\n    if (costs.length !== 3) {\n        return this;\n    }\n\n    var forward_id = parseInt(costs[0]);\n    var backward_id = parseInt(costs[1]);\n    var cost = parseInt(costs[2]);\n\n    if (forward_id < 0 || backward_id < 0 || !isFinite(forward_id) || !isFinite(backward_id) ||\n        this.connection_cost.forward_dimension <= forward_id || this.connection_cost.backward_dimension <= backward_id) {\n        throw \"Parse error of matrix.def\";\n    }\n\n    this.connection_cost.put(forward_id, backward_id, cost);\n    this.lines++;\n    return this;\n};\n\nConnectionCostsBuilder.prototype.build = function () {\n    return this.connection_cost;\n};\n\nmodule.exports = ConnectionCostsBuilder;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar CharacterDefinition = require(\"../CharacterDefinition\");\nvar InvokeDefinitionMap = require(\"../InvokeDefinitionMap\");\n\nvar CATEGORY_DEF_PATTERN = /^(\\w+)\\s+(\\d)\\s+(\\d)\\s+(\\d)/;\nvar CATEGORY_MAPPING_PATTERN = /^(0x[0-9A-F]{4})(?:\\s+([^#\\s]+))(?:\\s+([^#\\s]+))*/;\nvar RANGE_CATEGORY_MAPPING_PATTERN = /^(0x[0-9A-F]{4})\\.\\.(0x[0-9A-F]{4})(?:\\s+([^#\\s]+))(?:\\s+([^#\\s]+))*/;\n\n/**\n * CharacterDefinitionBuilder\n * @constructor\n */\nfunction CharacterDefinitionBuilder() {\n    this.char_def = new CharacterDefinition();\n    this.char_def.invoke_definition_map = new InvokeDefinitionMap();\n    this.character_category_definition = [];\n    this.category_mapping = [];\n}\n\nCharacterDefinitionBuilder.prototype.putLine = function (line) {\n    var parsed_category_def = CATEGORY_DEF_PATTERN.exec(line);\n    if (parsed_category_def != null) {\n        var class_id = this.character_category_definition.length;\n        var char_class = CharacterDefinition.parseCharCategory(class_id, parsed_category_def);\n        if (char_class == null) {\n            return;\n        }\n        this.character_category_definition.push(char_class);\n        return;\n    }\n    var parsed_category_mapping = CATEGORY_MAPPING_PATTERN.exec(line);\n    if (parsed_category_mapping != null) {\n        var mapping = CharacterDefinition.parseCategoryMapping(parsed_category_mapping);\n        this.category_mapping.push(mapping);\n    }\n    var parsed_range_category_mapping = RANGE_CATEGORY_MAPPING_PATTERN.exec(line);\n    if (parsed_range_category_mapping != null) {\n        var range_mapping = CharacterDefinition.parseRangeCategoryMapping(parsed_range_category_mapping);\n        this.category_mapping.push(range_mapping);\n    }\n};\n\nCharacterDefinitionBuilder.prototype.build = function () {\n    // TODO If DEFAULT category does not exist, throw error\n    this.char_def.invoke_definition_map.init(this.character_category_definition);\n    this.char_def.initCategoryMappings(this.category_mapping);\n    return this.char_def;\n};\n\nmodule.exports = CharacterDefinitionBuilder;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar doublearray = require(\"doublearray\");\nvar DynamicDictionaries = require(\"../DynamicDictionaries\");\nvar TokenInfoDictionary = require(\"../TokenInfoDictionary\");\nvar ConnectionCostsBuilder = require(\"./ConnectionCostsBuilder\");\nvar CharacterDefinitionBuilder = require(\"./CharacterDefinitionBuilder\");\nvar UnknownDictionary = require(\"../UnknownDictionary\");\n\n/**\n * Build dictionaries (token info, connection costs)\n *\n * Generates from matrix.def\n * cc.dat: Connection costs\n *\n * Generates from *.csv\n * dat.dat: Double array\n * tid.dat: Token info dictionary\n * tid_map.dat: targetMap\n * tid_pos.dat: posList (part of speech)\n */\nfunction DictionaryBuilder() {\n    // Array of entries, each entry in Mecab form\n    // (0: surface form, 1: left id, 2: right id, 3: word cost, 4: part of speech id, 5-: other features)\n    this.tid_entries = [];\n    this.unk_entries = [];\n    this.cc_builder = new ConnectionCostsBuilder();\n    this.cd_builder = new CharacterDefinitionBuilder();\n}\n\nDictionaryBuilder.prototype.addTokenInfoDictionary = function (line) {\n    var new_entry = line.split(\",\");\n    this.tid_entries.push(new_entry);\n    return this;\n};\n\n/**\n * Put one line of \"matrix.def\" file for building ConnectionCosts object\n * @param {string} line is a line of \"matrix.def\"\n */\nDictionaryBuilder.prototype.putCostMatrixLine = function (line) {\n    this.cc_builder.putLine(line);\n    return this;\n};\n\nDictionaryBuilder.prototype.putCharDefLine = function (line) {\n    this.cd_builder.putLine(line);\n    return this;\n};\n\n/**\n * Put one line of \"unk.def\" file for building UnknownDictionary object\n * @param {string} line is a line of \"unk.def\"\n */\nDictionaryBuilder.prototype.putUnkDefLine = function (line) {\n    this.unk_entries.push(line.split(\",\"));\n    return this;\n};\n\nDictionaryBuilder.prototype.build = function () {\n    var dictionaries = this.buildTokenInfoDictionary();\n    var unknown_dictionary = this.buildUnknownDictionary();\n\n    return new DynamicDictionaries(dictionaries.trie, dictionaries.token_info_dictionary, this.cc_builder.build(), unknown_dictionary);\n};\n\n/**\n * Build TokenInfoDictionary\n *\n * @returns {{trie: *, token_info_dictionary: *}}\n */\nDictionaryBuilder.prototype.buildTokenInfoDictionary = function () {\n\n    var token_info_dictionary = new TokenInfoDictionary();\n\n    // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n    var dictionary_entries = token_info_dictionary.buildDictionary(this.tid_entries);\n\n    var trie = this.buildDoubleArray();\n\n    for (var token_info_id in dictionary_entries) {\n        var surface_form = dictionary_entries[token_info_id];\n        var trie_id = trie.lookup(surface_form);\n\n        // Assertion\n        // if (trie_id < 0) {\n        //     console.log(\"Not Found:\" + surface_form);\n        // }\n\n        token_info_dictionary.addMapping(trie_id, token_info_id);\n    }\n\n    return {\n        trie: trie,\n        token_info_dictionary: token_info_dictionary\n    };\n};\n\nDictionaryBuilder.prototype.buildUnknownDictionary = function () {\n\n    var unk_dictionary = new UnknownDictionary();\n\n    // using as hashmap, string -> string (word_id -> surface_form) to build dictionary\n    var dictionary_entries = unk_dictionary.buildDictionary(this.unk_entries);\n\n    var char_def = this.cd_builder.build(); // Create CharacterDefinition\n\n    unk_dictionary.characterDefinition(char_def);\n\n    for (var token_info_id in dictionary_entries) {\n        var class_name = dictionary_entries[token_info_id];\n        var class_id = char_def.invoke_definition_map.lookup(class_name);\n\n        // Assertion\n        // if (trie_id < 0) {\n        //     console.log(\"Not Found:\" + surface_form);\n        // }\n\n        unk_dictionary.addMapping(class_id, token_info_id);\n    }\n\n    return unk_dictionary;\n};\n\n/**\n * Build double array trie\n *\n * @returns {DoubleArray} Double-Array trie\n */\nDictionaryBuilder.prototype.buildDoubleArray = function () {\n    var trie_id = 0;\n    var words = this.tid_entries.map(function (entry) {\n        var surface_form = entry[0];\n        return { k: surface_form, v: trie_id++ };\n    });\n\n    var builder = doublearray.builder(1024 * 1024);\n    return builder.build(words);\n};\n\nmodule.exports = DictionaryBuilder;\n", "/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar TokenizerBuilder = require(\"./TokenizerBuilder\");\nvar DictionaryBuilder = require(\"./dict/builder/DictionaryBuilder\");\n\n// Public methods\nvar kuromoji = {\n    builder: function (option) {\n        return new TokenizerBuilder(option);\n    },\n    dictionaryBuilder: function () {\n        return new DictionaryBuilder();\n    }\n};\n\nmodule.exports = kuromoji;\n", "export default require(\"./node_modules/kuromoji/src/kuromoji.js\");"],
  "mappings": "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AW;AAAA,QAAW;AAAA,QAAS;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAC9e;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAS;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAS;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAC9e;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,QAAW;AAAA,QAAW;AAAA,QAAW;AAAA,QAAU;AAAA,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",
  "names": ["global", "exports", "args", "index", "transform", "iterator", "callback", "cb", "filter", "hasOwnProperty", "memoized"]
}
